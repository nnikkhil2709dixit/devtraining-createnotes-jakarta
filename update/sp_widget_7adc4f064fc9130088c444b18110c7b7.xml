<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[/*
function($scope,$rootScope) { */
	/* widget controller */
/*	var c = this;
	
	$rootScope.$on('selectNote', function(event,data) {
		console.log('Listner caught NoteID: ' + $rootScope.noteID);
	});
}
*/


function($scope,$rootScope) {
	/* widget controller*/
	var c = this;
	
	$rootScope.$on('selectNote', function(event,data){
		c.server.get ({
			action: 'getNote',
			noteID: $rootScope.noteID
		}).then(function(r) {
			c.data.title = r.data.note.title;
			c.data.note = r.data.note.note;
			c.data.noteID = r.data.note.sys_id;
		});
	});
	//The ng-change directives in the HTML Template call updateNote(). 
	//You must add a function to the widgetâ€™s (Notes body) Client Script to handle the updates.
	c.updateNote = function(updateType) { //The script is currently not doing anything with the updateType value passed in from ng-change.
		//The function must specify the action name, 
		//pass necessary properties and values to the server 
		//so the updates can be written to the database, 
		//and supply a callback function for the server.get().
		c.server.get({
			action: 'updateNote',
			noteID: c.data.noteID,
			noteBody: c.data.note,
			noteTitle: c.data.title
		}).then(function(r) {
		});
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>notes_body</id>
        <internal>false</internal>
        <link/>
        <name>Notes Body</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[
/* populate the 'data' object */
/* e.g., data.table = $sp.getValue('table'); */
(function() {
	/* populate the 'data' object */

	if (input && input.noteID) {
		var note = new GlideRecord('x_snc_createnotes_note');
		if (note.get(input.noteID)) {
			if (input.action == 'getNote') {
				data.note = {};
				$sp.getRecordValues(data.note, note, "title, note, sys_id");
			}
			else if (input.action == 'updateNote') { //The input object is received from the Client Script
				note.title = input.noteTitle; 
				note.note = input.noteBody; 
				note.update(); //The GlideRecord update() method writes new values to an existing record to the database
			}
		}
	}
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-03-26 11:30:40</sys_created_on>
        <sys_id>7adc4f064fc9130088c444b18110c7b7</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>Notes Body</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_7adc4f064fc9130088c444b18110c7b7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-03-29 08:42:25</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default" ng-show="c.data.noteID">
	  <div class="panel-heading clearfix">
	    <div class="row">
	      <div class="col-md-12">
          <input class="form-control" id="note-title" ng-model="c.data.title" ng-change="c.updateNote('title')" ng-model-options="{debounce: 1000}"/>
	      </div>
	    </div>
	  </div>
	  <div class="panel-body">
      <textarea class="form-control" id="note-body" ng-model="c.data.note" ng-change="c.updateNote('body')" ng-model-options="{debounce: 1000}" ></textarea>
	  </div>
	</div>

]]></template>
    </sp_widget>
</record_update>
